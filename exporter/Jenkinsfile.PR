// define constants
def BUILDCFG_NAME ='devexutils'
def IMAGE_NAME = 'devexutils'
def DEV_DEPLOYMENT_NAME = 'devexutils'
def DEV_TAG_NAME = 'dev'
def DEV_NS = 'devex-platform-dev'
def REPO_URL = 'https://github.com/BCDevExchange'
def REPO_NAME = 'devUtils'
def REPO_BRANCH = 'master'

import groovy.json.JsonOutput
def notifySlack(text, channel, url, attachments) {
    def slackURL = url
    def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
    def payload = JsonOutput.toJson([text: text,
        channel: channel,
        username: "Jenkins",
        icon_url: jenkinsIcon,
        attachments: attachments
    ])
    def encodedReq = URLEncoder.encode(payload, "UTF-8")
    sh("curl -s -S -X POST " +
            "--data \'payload=${encodedReq}\' ${slackURL}")    
}

@NonCPS
def getChangeString() {
  MAX_MSG_LEN = 512
  def changeString = ""
  def changeLogSets = currentBuild.changeSets
  for (int i = 0; i < changeLogSets.size(); i++) {
     def entries = changeLogSets[i].items
     for (int j = 0; j < entries.length; j++) {
         def entry = entries[j]
         truncated_msg = entry.msg.take(MAX_MSG_LEN)
         changeString += " - ${truncated_msg} [${entry.author}]\n"
     }
  }
  if (!changeString) {
     changeString = "No changes"
  }
  return changeString
}

// pipeline

// Note: openshiftVerifyDeploy requires policy to be added:
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-dev
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-test
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-prod

stage('Get PR #') {	
  timeout(time: 1, unit: 'DAYS') {
    prNumber = input( id: 'prNumber', message: 'Please enter the Pull Request # ?', 
	                    parameters: [[$class: 'TextParameterDefinition', defaultValue: '0', description: 'PRNo', name: 'PRNo']] )
  }
}

node('maven') {
    stage('checkout PR ${prNumber}') {
      git clone ${REPO_URL}/${REPO_NAME}.git
      cd ${REPO_NAME}
      git fetch origin pull/$prNumber/head:${REPO_BRANCH}
      git checkout ${REPO_BRANCH}
   }   
   stage('build') {
	    echo "Building..."
	    openshiftBuild bldCfg: BUILDCFG_NAME, showBuildLogs: 'true'
      sleep 5
	    openshiftVerifyBuild bldCfg: BUILDCFG_NAME
      echo ">>> Get Image Hash"
      IMAGE_HASH = sh (
              script: """oc get istag ${IMAGE_NAME}:latest -o template --template=\"{{.image.dockerImageReference}}\"|awk -F \":\" \'{print \$3}\'""",
                returnStdout: true).trim()
            echo ">> IMAGE_HASH: ${IMAGE_HASH}"
	    openshiftTag destStream: IMAGE_NAME, verbose: 'true', destTag: '${IMAGE_NAME}-PR-${prNumber}, srcStream: IMAGE_NAME, srcTag: "${IMAGE_HASH}"
      echo ">>>> Build Complete"
    }
}
